# Basic example

Radio Groups are built using a combination of the `RadioGroup`, `RadioGroupOption`, `RadioGroupLabel`, and `RadioGroupDescription` components:

```svelte
<script>
  import { RadioGroup, RadioGroupLabel, RadioGroupOption, RadioGroupDescription } from "@rgossiaux/svelte-headlessui";
  let plan = "startup";
</script>

<RadioGroup value={plan} on:change={(e) => plan = e.detail}>
  <RadioGroupLabel>Plan</RadioGroupLabel>
  <RadioGroupOption value="startup" let:checked>
    <span class:checked>Startup</span>
  </RadioGroupOption>
  <RadioGroupOption value="business" let:checked>
    <span class:checked>Business</span>
  </RadioGroupOption>
  <RadioGroupOption value="enterprise" let:checked>
    <span class:checked>Enterprise</span>
  </RadioGroupOption>
</RadioGroup>

<style>
  .checked {
    /* Your styles here */
  }
</style>
```

# Styling

This component is completely unstyled by default, allowing you to customize the appearance of the `RadioGroup` yourself. This is primarily done via <a href="https://svelte.dev/tutorial/slot-props">slot props</a>. See below for examples.

Slot props can be used to style any descendent components, but they cannot be used to style the same component that defines them. To work around this, any component that defines slot props will also accept a **function** for its `class` prop. This function will be **called with the slot props as an argument**. See below for examples.

## Checked option

To style the selected `RadioGroupOption`, you can use the `checked` slot prop that it provides, which tells you whether or not that option is the currently selected one. You can use this state to conditionally apply whatever styles you wish.

```svelte
<script>
  import { RadioGroup, RadioGroupLabel, RadioGroupOption } from "@rgossiaux/svelte-headlessui";
  let plan = "startup";
</script>

<RadioGroup value={plan} on:change={(e) => plan = e.detail}>
  <RadioGroupLabel>Plan</RadioGroupLabel>
  <!-- Use the `checked` slot prop to conditionally style the checked item -->
  <RadioGroupOption value="startup" let:checked>
    <span class:checked>Startup</span>
  </RadioGroupOption>
  <!-- ... -->
</RadioGroup>

<style>
  .checked {
    /* Your styles here */
  }
</style>
```

## Active options

`RadioGroupOption`s can also be in an `active` state if they are focused with either the mouse or the keyboard. It's a good idea to add styles specifically for this state.

```svelte
<script>
  import { RadioGroup, RadioGroupLabel, RadioGroupOption } from "@rgossiaux/svelte-headlessui";
  let plan = "startup";
</script>

<RadioGroup value={plan} on:change={(e) => plan = e.detail}>
  <RadioGroupLabel>Plan</RadioGroupLabel>
  <!-- Use both `active` and `checked` slot props to differentiate between the active and checked states -->
  <RadioGroupOption value="startup" let:active let:checked>
    <span class:active class:checked>Startup</span>
  </RadioGroupOption>
  <!-- ... -->
</RadioGroup>

<style>
  .active {
    /* Your styles here */
  }

  .checked {
    /* Your styles here */
  }
</style>
```

## Applying conditional classes to options

In addition to the `active` and `checked` slot props available inside a `RadioGroupOption`, the `class` prop also accepts a function that receives those same slot props. This means you can conditionally apply class names directly to the `RadioGroupOption` component, which by default renders a `div`.

```svelte
<script>
  import { RadioGroup, RadioGroupLabel, RadioGroupOption } from "@rgossiaux/svelte-headlessui";
  let plan = "startup";
</script>

<RadioGroup value={plan} on:change={(e) => plan = e.detail}>
  <RadioGroupLabel>Plan</RadioGroupLabel>
  <!-- Use the slot props to apply styling directly to the `RadioGroupOption` -->
  <RadioGroupOption value="startup" class={({ active, checked }) => `
    ${active ? "active" : ""}
    ${checked ? "checked" : ""}
  `}>
    Startup
  </RadioGroupOption>
  <!-- ... -->
</RadioGroup>

<style>
  /* WARNING! This is just for demonstration. Using :global() in this way is a bad practice. See below for more. */
  :global(.active) {
    /* Your styles here */
  }

  :global(.checked) {
    /* Your styles here */
  }
</style>
```

Unfortunately, in Svelte, classes passed to components are not locally-scoped the way they are with HTML elements. See TODO for recommendations about styling components.

# Using the Label and Description components

You can use the `RadioGroupLabel` and `RadioGroupDescription` components to label and describe each `RadioGroupOption`, as well as the `RadioGroup` itself. These components will automatically link with their relevant ancestor components via the `aria-labelledby` and `aria-describedby` attributes, improving the semantics and accessibility of your component.

By default, `RadioGroupLabel` renders a `<label>` element and `RadioGroupDescription` renders a `<p>`. These can be customized using the `as` prop, as described in the API docs below.

```svelte
<script>
  import { RadioGroup, RadioGroupLabel, RadioGroupOption, RadioGroupDescription } from "@rgossiaux/svelte-headlessui";
  let plan = "startup";
</script>

<RadioGroup value={plan} on:change={(e) => plan = e.detail}>
  <!-- This Label is for the `RadioGroup` -->
  <RadioGroupLabel>Plan</RadioGroupLabel>

  <RadioGroupOption value="startup" let:checked>
    <RadioGroupLabel as="span" class:checked>Startup</span>
    <RadioGroupDescription as="span" class:checked>Up to 5 active job postings</RadioGroupDescription>
  </RadioGroupOption>
  <!-- ... -->
</RadioGroup>

<style>
  /* WARNING! This is just for demonstration. Using :global() in this way is a bad practice. See TODO for more. */
  :global(.checked) {
    /* Your styles here */
  }
</style>
```

# Accessibility notes

## Mouse interaction

Clicking a `RadioGroupOption` will select it.

## Keyboard interaction

| Command | Description |
| ------- | ----------- |
| `<ArrowDown>` / `<ArrowRight>` when `RadioGroup` is focused | Focuses and checks the next `RadioGroupOption` |
| `<ArrowUp>` / `<ArrowLeft>` when `RadioGroup` is focused | Focuses and checks the previous `RadioGroupOption` |
| `<Space>` when `RadioGroup` is focused | Checks the current `RadioGroupOption` if it is not already checked |

## Other

All relevant ARIA attributes are automatically managed.

For a full reference on all accessibility features implemented in `RadioGroup`, see <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#radiobutton">the ARIA spec on Radio Groups</a>.

# Component API

## RadioGroup

The main Radio Group component.

| Prop | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| `as` | `div`   | `String` | The element the `RadioGroup` should render as |
| `disabled` | `false`   | `boolean` | Whether the `RadioGroup` and all of its `RadioGroupOption`s are disabled |
| `value` | --   | `T | undefined` | The currently selected value in the `RadioGroup` |

This component also dispatches a custom event, which is listened to using the Svelte `on:` directive:

| Event name | Type of event `.detail` | Description |
| --------- | ---- | ----------- |
| `change`    | `T` | Dispatched when a `RadioGroupOption` is selected; the event `detail` contains the `value` of the selected option |

## RadioGroupOption

The wrapper component for each selectable option.

| Prop | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| `as` | `div`   | `String` | The element the `RadioGroupOption` should render as |
| `disabled` | `false`   | `boolean` | Whether the `RadioGroupOption` is disabled |
| `value` | --   | `T | undefined` | The value of the `RadioGroupOption`; the type should match the type of the `value` prop in the `RadioGroup` |

| Slot prop | Type | Description |
| --------- | ---- | ----------- |
| `active`    | `boolean` | Whether the option is active (using the mouse or keyboard) |
| `checked`    | `boolean` | Whether the option is the checked option |
| `disabled`    | `boolean` | Whether the option is disabled |

## RadioGroupLabel

Renders an element that is linked to its nearest `RadioGroup` or `RadioGroupOption` ancestor component via the `aria-labelledby` attribute and an autogenerated id.

| Prop | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| `as` | `label`   | `String` | The element the `RadioGroupLabel` should render as |

If the `RadioGroupLabel` is labeling a `RadioGroupOption` (instead of the `RadioGroup`), it will also have these slot props available:

| Slot prop | Type | Description |
| --------- | ---- | ----------- |
| `active`    | `boolean` | Whether the corresponding option is active (using the mouse or keyboard) |
| `checked`    | `boolean` | Whether the corresponding option is the checked option |
| `disabled`    | `boolean` | Whether the corresponding option is disabled |

## RadioGroupDescription

Renders an element that is linked to its nearest `RadioGroup` or `RadioGroupOption` ancestor component via the `aria-describedby` attribute and an autogenerated id.

| Prop | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| `as` | `a`   | `String` | The element the `RadioGroupDescription` should render as |

If the `RadioGroupDescription` is describing a `RadioGroupOption` (instead of the `RadioGroup`), it will also have these slot props available:

| Slot prop | Type | Description |
| --------- | ---- | ----------- |
| `active`    | `boolean` | Whether the corresponding option is active (using the mouse or keyboard) |
| `checked`    | `boolean` | Whether the corresponding option is the checked option |
| `disabled`    | `boolean` | Whether the corresponding option is disabled |
